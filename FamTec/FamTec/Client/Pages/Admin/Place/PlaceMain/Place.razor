@page "/admin/place"

<<<<<<< HEAD:FamTec/FamTec/Client/Pages/Admin/Place/PlaceMain/Place.razor
@using FamTec.Client.Pages.Admin.Place.PlaceMain.Modal
@using FamTec.Shared.Client.DTO
=======
@using FamTec.Client.Pages.Place.Components
>>>>>>> Temp:FamTec/FamTec/Client/Pages/Place/Place.razor
@using FamTec.Shared.Server
@using FamTec.Shared.Server.DTO.Admin.Place
@using Newtonsoft.Json
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@using FamTec.Client.Pages.Admin.CommonComponents

<div class="place-container">
        <div class="place-header">
            <span class="place-title">
                사업장 목록
            </span>
            <div class="table-header-option">
                <Input Placeholder="Research" />
                <Button 
                    Name="추가"
                    Width="true"
                    OnClick="@onAddPlace" />
            </div>
        </div>
        <div class="place-table">
            <Table DataList="PlaceList" />
        </div>
        @if (is_openModal)
        {
            <AddModal Title="사업장 등록" OnClose="@OnModalClose" />
        }
    
 
</div>

@code {
     /*
     * 테이블 데이터
    */
    List<AllPlaceDTO> PlaceList;
    List<string> PlaceProperties = new List<string>();
<<<<<<< HEAD:FamTec/FamTec/Client/Pages/Admin/Place/PlaceMain/Place.razor
    List<PlaceDTO> SelecList = new List<PlaceDTO>();
    DateTime a;
=======
    List<AllPlaceDTO> SelecList = new List<AllPlaceDTO>();

>>>>>>> Temp:FamTec/FamTec/Client/Pages/Place/Place.razor

    public HttpClient httpClient = new HttpClient();

    bool is_openModal = false;

    protected override async Task OnInitializedAsync()
    {

        /*
        * fetch 서버 요청
        */
        Console.WriteLine("매니저 조회 시작");
        ResponseObj<AllPlaceDTO> res = await httpClient.GetFromJsonAsync<ResponseObj<AllPlaceDTO>>("https://127.0.0.1:7114/api/AdminPlace/GetAllWorksList");
        PlaceList = res.data;
        Console.WriteLine(PlaceList.Count);

        var properties = typeof(AllPlaceDTO).GetProperties();

        foreach(var property in properties)
        {
            var displayAttribute = property.GetCustomAttribute<DisplayAttribute>();
            if(displayAttribute != null)
            {
                string displayName = displayAttribute.Name;
                PlaceProperties.Add(displayName);
            }
        }
    }

    /*
    * Add to List<PlaceDTO>SelectList when able Checkbox
    */
    public void OnSelected(object row)
    {
        /*
        * To Do
        * 동일 row 중복 처리
        */
        Console.WriteLine(row);

        if (row is AllPlaceDTO palceRow)
        {
            if (!SelecList.Contains(row))
            {
                Console.WriteLine("추가");
                SelecList.Add(palceRow);
            }

        }



        Console.WriteLine(SelecList);
    }

    /*
    * Remove to List<PlaceDTO>SelectList when disable Checkbox
    */
    public void UnSelected(object row)
    {
        if (row is AllPlaceDTO palceRow)
        {
            Console.WriteLine("삭제 전");
            foreach (AllPlaceDTO a in SelecList)
            {

                Console.WriteLine(a.PlaceCd);
            }
            SelecList.Remove(palceRow);
            Console.WriteLine("삭제 후");
            foreach (AllPlaceDTO a in SelecList)
            {

                Console.WriteLine(a.PlaceCd);
            }
        }
    }

    /*
    * click add
    */
    private void onAddPlace()
    {
        is_openModal = true;
    }



    private void OnModalClose()
    {
        is_openModal = false;
        StateHasChanged();
    }
}
