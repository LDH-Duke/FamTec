@using FamTec.Client.Pages.Admin.CommonComponents
@using FamTec.Shared.Client.DTO
﻿
@using FamTec.Shared.Client.DTO.Place
@using FamTec.Shared.Server
@using FamTec.Shared.Server.DTO

@inject HttpClient HttpClient

<div class="placetable-container">
    <div class="placetable-title">
        <span>
            사업장 목록
        </span>
        <Input Placeholder="search" ValueChanged="OnSearchTextChanged" />
    </div>
    <div class="placetable-table">
        <Table DataList="FilterPlaceList" Select="OnSelected" />
    </div>
    <div class="placetable-count">
        <span>
            선택 : @SelectCount
        </span>
    </div>
</div>

@code {
    [Parameter] public AddManagerPlaceDTO NewManagerPlace { get; set; }
    List<PlaceTableDTO> PlaceList;
    int SelectCount = 0;

    //검색 변수
    List<PlaceTableDTO> FilterPlaceList = new List<PlaceTableDTO>();
    string searchText = string.Empty;


    protected async override Task OnInitializedAsync()
    {
        ResponseList<PlaceTableDTO> res = await HttpClient.GetFromJsonAsync<ResponseList<PlaceTableDTO>>("http://123.2.156.148:5245/api/AdminPlace/GetAllWorksList");

        PlaceList = res.data;
        PlaceList.RemoveAll(place => place.Status == 0);
        FilterPlaceList = PlaceList;
    }

     /*
     * 사업장 조회
    */
    private async Task LoadPlaces()
    {
        
    }


    /*
    * 부서 선택
    */
    public void OnSelected((bool isCheck, int id) selection)
    {
        if (NewManagerPlace == null)
        {
            Console.WriteLine("dd");
        }
        Console.WriteLine("부서 체크 여부" + selection.isCheck);
        if (!selection.isCheck)
        {
            NewManagerPlace.PlaceList.Remove(selection.id);
            SelectCount--;
        }
        else
        {
            Console.WriteLine("추가함");
            NewManagerPlace.PlaceList.Add(selection.id);
            SelectCount++;
        }
        
    }

      /*
     * 검색 데이터 필터링
    */
    private void OnSearchTextChanged(string text)
    {
        // searchText = e.Value.ToString();
        searchText = text;
        FilterPlaceList = string.IsNullOrEmpty(searchText)
            ? PlaceList
            : PlaceList.Where(p => p.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                                   p.PlaceCd.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                                   p.ContractNum.Contains(searchText, StringComparison.OrdinalIgnoreCase))
                        .ToList();
    }

}
