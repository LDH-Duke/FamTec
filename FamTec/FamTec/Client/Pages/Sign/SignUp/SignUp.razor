@page "/login"
@using FamTec.Client.Pages.Sign.CommonComponents
@using FamTec.Shared.Server.DTO
@using FamTec.Shared.Server.DTO.Login
@using System.Text.Json
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json.Linq
@inject IJSRuntime IJSRuntime
@inject HttpClient HttpClient
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavigationManager


<div class="signup-container">
    <div class="signup-wrap">
        <div class="signup-title">
            <span class="title">
                Login
            </span>
            <Toggle Title="관리자모드"
                    EditMode=true
                    @bind-Value="@LoginMode" />
        </div>
        <div class="signup-form">
            <InputField Label="ID"
                        EditMode=true
                        Placeholder="ID"
                        @bind-Value="@user.UserID" />
            <InputField Label="PW"
                        InputType="Password"
                        EditMode=true
                        Placeholder="Password"
                        @bind-Value="@user.UserPassword" />
        </div>
        <Button Name="Login" OnClick="OnSignUp" />
    </div>
</div>

@code {
    LoginDTO user = new LoginDTO();
    sbyte? LoginMode;

    protected override void OnInitialized()
    {
        
    }



    private async Task OnSignUp()
    {
        try
        {
            if (user.UserPassword != null && user.UserID != null)
            {
                HttpResponseMessage resLogin = null;
                if (LoginMode == 1)
                {
                    resLogin = await HttpClient.PostAsJsonAsync("http://123.2.156.148:5245/api/AdminUser/Login", user);
                }
                else
                {
                    resLogin = await HttpClient.PostAsJsonAsync("http://123.2.156.148:5245/api/Login/UserLogin", user);
                }


                if (resLogin.IsSuccessStatusCode)
                {

                    /*
                    * 세션 스토리지 저장
                    * 메인페이지 이동
                    */
                    var token = await resLogin.Content.ReadAsStringAsync();
                    Console.WriteLine(token);
                    var res = JsonSerializer.Deserialize<ResponseUnit<string>>(token);
                    if (res.code != 200)
                    {
                        await IJSRuntime.InvokeVoidAsync("alert", "아이디 또는 패스워드가 일치하지 않습니다.");
                        user = new LoginDTO();
                        return;
                    }
                    await sessionStorage.SetItemAsStringAsync("SWORKSSESSION", res.data);
                    await sessionStorage.SetItemAsync("LoginMode", Convert.ToInt32(LoginMode));

                    
                    


                    //var session = await sessionStorage.GetItemAsStringAsync("SWORKSSESSION");


                    //string temp = await tokenconvert.GetClaimValue(session, "SWORKSSESSION");


                    
               

                    NavigationManager.NavigateTo("/");

                }
            }
            else
            {
                await IJSRuntime.InvokeVoidAsync("alert", "아이디 또는 패스워드가 공백입니다.");
                user = new LoginDTO();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("[SignUp][OnSignUp] 로그인 요청 에러" + ex);
        }
        Console.WriteLine(user.UserID);
        Console.WriteLine(user.UserPassword);
    }
}
